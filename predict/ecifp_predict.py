"""
platform: win
env: any with autogluon
name: ecifp_predict.py
do prediction with ECIFP models
"""
import os
from configs.config import model_test_dir, ecifp_catboost, ecifp_lightgbm, casf_dir, data_dir, meif_data_dir, tmp_dir
import pandas as pd
from util.ECIFP import ECIFP, LIGAND_DESC
from util.RDKitHelper import get_decoy_names
import pickle
from tqdm import tqdm
import time


def predict(f_pro, f_lig, model):
    """
    predict on protein-ligand pairs not in pdbbind dataset
    :param f_pro: protein file, .pdb
    :param f_lig: ligand file, .sdf
    :param model: specific model generated by autogluon
    :return:
    """
    ecifp_helper = ECIFP()
    ecifp = ecifp_helper.get_ecifp(f_pro, f_lig, float(6.0))
    ld = ecifp_helper.get_ligand_features_by_file(f_lig)
    m = pickle.load(open(model, 'rb'))
    data = ecifp + list(ld)
    cols = ecifp_helper.get_possible_pl() + LIGAND_DESC
    data_f = pd.DataFrame([data], columns=cols)
    return m.predict(data_f)[0]


def multi_ligd_pred(test_name):
    """
    for extra tests, do estimations on a list of proteins that are not belongs to PDBBind dataset;
    and multiple choices of ligands are matched to one protein
    Caution: file structure of subtest folder should be:
    ├── {test_name}(folder)
        ├── {protein_id}(folder)
            ├── {protein_id}_protein.pdb
            ├── ligs(folder)
                ├── {ligand_name}.sdf
                ├── {ligand_name}.sdf
                ├── ...
        ├── {protein_id}(folder)
            ├── {protein_id}_protein.pdb
            ├── ligs(folder)
                ├── {ligand_name}.sdf
                ├── {ligand_name}.sdf
                ├── ...
        ├── ...
    :param test_name: subtest folder
    :return:
    """
    print("\n")
    ids = os.listdir(os.path.join(model_test_dir, test_name))
    start = time.perf_counter()

    for i in ids:
        preds_ag = []
        lig_name = []
        f_prot = os.path.join(model_test_dir, test_name, "{}\\{}_protein.pdb".format(i, i))
        f_ligs = os.path.join(model_test_dir, test_name, "{}\\ligs".format(i))
        for j in tqdm(os.listdir(f_ligs)):
            f_lig = os.path.join(f_ligs, j)
            pk_ag = predict(f_prot, f_lig, ecifp_catboost)
            preds_ag.append(pk_ag)
            lig_name.append(j[:-4])
        df_protein_name = pd.DataFrame([i] * len(lig_name), columns=["protein"])
        df_lig_name = pd.DataFrame(lig_name, columns=["ligand"])
        df_prediction = pd.DataFrame(preds_ag, columns=["prediction"])
        result = df_protein_name.join(df_lig_name.join(df_prediction))
        result.to_csv(os.path.join(model_test_dir, test_name, "{}\\{}_result.csv".format(i, i)))

    end = time.perf_counter()
    print('\n')
    print('run time: {} seconds'.format(round(end - start)))


def predict_on_core(model):
    """
    for CASF analysis, make predictions on CASF core set
    :param model: specific model generated by autogluon
    :return:
    """
    print("\n")
    ids = os.listdir(casf_dir["core"])
    start = time.perf_counter()

    preds_ag = []
    lig_names = []
    for i in tqdm(ids):

        f_prot = os.path.join(casf_dir["core"], "{}\\{}_protein.pdb".format(i, i))
        f_ligd = os.path.join(casf_dir["core"], "{}\\{}_ligand.sdf".format(i, i))
        pk_ag = predict(f_prot, f_ligd, model)
        preds_ag.append(pk_ag)
        lig_names.append(i)
    result = pd.DataFrame({"#code": lig_names, "score": preds_ag}, columns=["#code", "score"])
    result.to_csv(os.path.join(data_dir, "ecifp.dat"), index=False)

    end = time.perf_counter()
    print('\n')
    print('run time: {} seconds'.format(round(end - start)))


def predict_on_decoy_by_id(lid, model):
    """
    for CASF docking power analysis
    :param lid: ligand/protein id
    :param model:
    :return:
    """
    f_pro = os.path.join(casf_dir["core"], lid, "{}_protein.pdb".format(lid))
    f_lig = os.path.join(casf_dir["core"], lid, "{}_ligand.sdf".format(lid))
    f_dec = os.path.join(casf_dir["decoys"], "{}_decoys.mol2".format(lid))

    ecifp_helper = ECIFP()
    start = time.perf_counter()

    ecifp_helper.cache_protein(f_pro)
    ecifps = ecifp_helper.get_decoys_ecifp_cached(f_dec, float(6.0))
    ld = ecifp_helper.get_ligand_features_by_decoy(f_dec)
    m = pickle.load(open(model, 'rb'))
    cols = ecifp_helper.get_possible_pl() + LIGAND_DESC
    ret = []
    dec_names = get_decoy_names(f_dec)

    for ecifp in tqdm(ecifps):
        data = ecifp + list(ld)
        data_f = pd.DataFrame([data], columns=cols)
        ret.append(m.predict(data_f)[0])

    result = pd.DataFrame({"#code": dec_names, "score": ret}, columns=["#code", "score"]) \
        .sort_values(by="score", ascending=False)
    result.loc[-1] = ["{}_ligand".format(lid), predict(f_pro, f_lig, model)]
    end = time.perf_counter()
    print('\n')
    print('run time: {} seconds'.format(round(end - start)))
    result.to_csv(os.path.join(tmp_dir, "decoy_pred", "{}_score.dat".format(lid)), index=False)
    return


if __name__ == '__main__':
    predict_on_decoy_by_id("1a30", ecifp_catboost)

